<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[选择排序]]></title>
    <url>%2F2019%2F09%2F24%2F%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F%2F</url>
    <content type="text"><![CDATA[最近学习算法，从一些经典的排序算法开始。 这篇讲的是我对选择排序的一些心得 选择排序：来源百度百科： 选择排序(Selection sort)是一种简单直观的排序算法。它的工作原理是每一次从待排序的数据元素中选出最小(或最大)的一个元素，存放在序列的起始(末尾)位置，直到全部待排序的数据元素排完。选择排序是不稳定的排序方法（比如序列[5， 5， 3]第一次就将第一个[5]与[3]交换，导致第一个5挪动到第二个5后面）。 上面提到了选择排序是不稳定的排序方法 判断某排序算法是否稳定，我们可以简单理解成：排序前2个相等的数其在序列的前后位置顺序和排序后它们两个的前后位置顺序相同 如果相同，则是稳定的排序方法。 如果不相同，则是不稳定的排序方法 思路：​ 每一次从待排序的元素中，选出最大（或最小）元素，放在集合的末尾（起始）位置。直到集合有序 ​ 当只有一个数时，则不需要选择了，因此需要n-1趟排序，比如10个数，需要9趟排序 ​ 每次排序过后，比较次数减一。比如第一趟需要比较九次。第二趟则需要比较八次。 代码实现思路：​ 双重for循环。外层控制循环趟数。内层循环找到当前趟数的最大值，随后与当前趟数最后一位元素交换。 ​ 如：数组array共有10个元素 ​ 第一趟排序选择第1个元素（array[0]），与后面9个元素比较。得到当前趟数最大值下标。 ​ 与当前趟数最后一位元素（array[9]）交换。 ​ 第二趟排序选择第1个元素（array[0]），与后面8个元素比较。得到当前趟数最大值下标。 ​ 与当前趟数最后一位元素（array[8]）交换。 ​ 123456789101112131415161718//选择排序public static void quickSort(int[] array)&#123; int temp ;//中间变量，交换值时使用 for(int i=0;i&lt;array.length-1;i++)&#123;//外层循环控制需要排序的趟数 int pos=0;//新的趟数、将角标重新赋值为0 for(int j=0;j&lt;array.length-i;j++)&#123;//内层循环控制比较的次数 if(array[j]&gt;array[pos])&#123; pos=j;//获取较大值的下标 &#125; &#125; //获取的最大值放在数组末尾 temp=array[array.length-i-1]; array[array.length-i-1]=array[pos]; array[pos]=temp; &#125; &#125; 参考资料： []: https://segmentfault.com/a/1190000014008568]]></content>
      <tags>
        <tag>排序算法</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[冒泡排序]]></title>
    <url>%2F2019%2F09%2F24%2F%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F%2F</url>
    <content type="text"><![CDATA[最近学习算法，从一些经典的排序算法开始。 这篇讲的是我对冒泡排序的一些心得 冒泡排序：来源百度百科： 冒泡排序（Bubble Sort，台湾译为：泡沫排序或气泡排序）是一种简单的排序算法。它重复地走访过要排序的数列，一次比较两个元素，如果他们的顺序错误就把他们交换过来。走访数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。这个算法的名字由来是因为越大的元素会经由交换慢慢“浮”到数列的顶端，故名。 思路：​ 两两交换，大的放在后面。第一次排序之后最大值在数组末尾 ​ 因为是两两交换，所以排序次数为n-1，比如10个数，需要9趟排序 ​ 每趟过后，比较次数减1 代码实现思路：​ 双重for循环，外层循环控制排序的趟数，内层循环控制比较的次数 12345678910111213//冒泡排序public static void bubbleSort(int[] array)&#123; int temp ;//中间变量 for(int i=0;i&lt;array.length-1;i++)&#123;//外层循环控制排序趟数 for(int j=0;j&lt;array.length-1-i;j++)&#123;//内层循环控制比较次数，每趟过后次数减一 if(array[j]&gt;array[j+1])&#123;//两两交换，大的放后面 temp=array[j+1]; array[j+1]=array[j]; array[j]=temp; &#125; &#125; &#125; &#125; 参考资料： []: https://segmentfault.com/a/1190000014008568]]></content>
      <tags>
        <tag>排序算法</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java入门]]></title>
    <url>%2F2019%2F07%2F13%2FJava%E5%85%A5%E9%97%A8%2F</url>
    <content type="text"><![CDATA[开始学习Java了，每学习一点就记录一下。 命名规范类名使用 UpperCamelCase 风格（首字母都大写），必须遵从驼峰形式。 例如： MessageUtil 抽象类命名使用 Abstract 或 Base 开头 ； 异常类命名使用 Exception 结尾 ； 测试类命名以它要测试的类的名称开始，以 Test 结尾。 方法名、参数名、成员变量、局部变量都统一使用 lowerCamelCase 风格（第一个单词首字母小写，其他单词首字母大写），必须遵从驼峰形式。 例如： myFirstName 常量命名全部大写，单词间用下划线隔开，力求语义表达完整清楚，不要嫌名字长。 例如：MAX_NAME_LENGTH 数据类型基本数据类型 byte：Java中最小的数据类型，在内存中占8位(bit)，即1个字节，取值范围-128~127，默认值0 short：短整型，在内存中占16位，即2个字节，取值范围-32768~32717，默认值0 int：整型，用于存储整数，在内在中占32位，即4个字节，取值范围-2147483648~2147483647，默认值0 long：长整型，在内存中占64位，即8个字节-2^63~2^63-1，默认值0L float：浮点型，在内存中占32位，即4个字节，用于存储带小数点的数字（与double的区别在于float类型有效小数点只有6~7位），默认值0 double：双精度浮点型，用于存储带有小数点的数字，在内存中占64位，即8个字节，默认值0 char：字符型，用于存储单个字符，占16位，即2个字节，取值范围0~65535，默认值为空 boolean：布尔类型，占1个字节，用于判断真或假（仅有两个值，即true、false），默认值false引用类型 引用数据类型 数组、字符串、类、接口等 三元运算符格式： 数据类型 变量名称=条件判断？ 表达式A: 表达式B 如果true 则表达式A的值赋给左边变量 如果false则表达式B的值赋给左边变量 Java内存划分 栈（stack）：存放的都是方法中的局部变量，方法的运行一定要在栈中运行 堆（heap）：凡是New出来的东西，都在堆当中 方法区（Method Area）：储存.class相关信息，包含方法的信息 本地方法栈（Native Method Stack）：与操作系统相关 寄存器（pc Register）：与CPU相关 面向对象三大特征： ​ 封装：封装就是将一些细节信息隐藏起来，对于外界不可见； ​ 方法就是封装 ​ Private也是一种封装 ​ 继承 ​ 多态 面向过程： 常用类和方法Scanner类获取键盘输入 123Scanner sc=new scanner（system.in）；Int num=sc.nextInt(); ArrayList类动态集合 ArrayList list=new ArrayList&lt;&gt;(); &lt;&gt;里面写数据类型，只能是引用类型，所有数据都要为同一类型 直接打印得到的是内容，而不是地址值 基本类型集合需要用包装类 常用方法： String 类 常用方法 .equals() 比较字符串 .equalsIgnoreCase()忽略大小写的比较 .length() 获取字符串长度 .concat(String str) 拼接字符串 .charAt(int index) 获取指定索引位置单个 .indexOf(String str) 查找字符串在本字符串的出现位置，没有则返回-1 .substring() 截取字符串 toCharArray() 拆成字符数组作为返回值 getBytes() 获取字符串底层的字节数组 .replace() 字符串内容替换 .split() 切分字符串（对“.”切割需要写成“\.”） Static关键字Static关键字修饰成员变量： 内容不属于对象自己，而是属于类的，凡是本类对象，都共享同一份 Static关键字修饰成员方法： 无static关键字，需要先创建对象再使用方法。 有static关键字，可以直接通过类名称调用。 静态代码块 Static{ ​ //代码块内容 } 特点：第一次用到本类，静态代码块执行唯一一次。 用法：一次性的对静态成员变量赋值 Arrays数组工具类 Math类 类：一组相关属性和行为的集合。可以看成是一类事物的模板，使用事物的属性特征和行为特征来描述该类事物。 对象：是一类事物的具体体现，对象是类的一个实例，必然具备该类的属性和行为。 匿名对象：New 类名称() . （只使用唯一一次） 包装类：将基本数据类型包装成一个对象 ​ 对照关系： char——Character ​ int——Integer ​ 其余首字母大写即可 自动装箱：基本类型–&gt;包装类型 自动拆箱：包装类型–&gt;基本类型 局部变量和成员变量（全局变量）]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[NexT主题美化(持续更新)]]></title>
    <url>%2F2019%2F07%2F05%2Fnext%E7%BE%8E%E5%8C%96%2F</url>
    <content type="text"><![CDATA[开启 动态背景目前NexT主题最新的是V6.0版本，这个版本中可以有4种动态背景： Canvas-nest /最爱 three_waves canvas_lines canvas_sphere 设置方法也很简单，直接设置里需要的动态背景为true。 配置菜单栏站点配置blog/_config.yml文件的基本配置 1234567# Sitetitle: Alvabillsubtitle: Stay Hungry, Stay Foolishauthor: Alvabilldescription: &quot;Alvabill个人站，主要涉及前端知识共享、实践教程、前沿技术共同学习等方面&quot; #网站描述 SEOlanguage: entimezone: Asia/Shanghai “title”：博客的名称。 “subtitle”：根据主题的不同，有的会显示有的不会显示。 “description”：主要用于SEO，告诉搜索引擎一个关于站点的简单描述，通常建议在其中包含网站的关键词。 “author”：作者名称，用于主题显示文章的作者。 “language”：语言会对应的解析正在应用的主题中的languages文件夹下的不同语言文件。所以这里的名称要和languages文件夹下的语言文件名称一致。 “timezone”：可不填写。 添加 分类及标签及关于页面分类生成分类页并添加分类属性 命令行blog目录下执行： 1$ hexo new page categories 成功后提示： 1INFO Created: ~/Documents/blog/source/categories/index.md 根据上面的路径，找到index.md这个文件，打开后修改为 123title: categoriesdate: 2019-07-05 13:24:49type: &quot;categories&quot; 保存关闭 给文章添加”categories”属性 打开需要添加分类的文章，添加categories属性。 两种写法： categories: 分类名 这种写法可以生成一种分类 categories： -hexo -xxx 此时hexo不会产生两个分类，而是把分类嵌套（即该文章属于 “- hexo”下的 “-xxx ”分类）。 123456title: Next的美化以及遇到的问题date: 2019-07-03 18:10:54categories: - Hexo- 标签,分类tags: 标签生成标签页并添加标签属性 命令行blog目录下执行： 1$ hexo new page tags 成功后提示： 1INFO Created: ~/Documents/blog/source/tags/index.md 根据上面的路径，找到index.md这个文件，打开后修改为 123title: tagsdate: 2019-07-05 13:40:54type: &quot;tags&quot; 保存关闭文件 给文章添加”tags“属性 打开需要添加分类的文章，添加tags属性。(默认有tags) 两种写法: 1.tags: 标签名 #此文章对应一个标签 2.tags: ​ - next ​ - xxx #文章可对应两个或多个标签 1234567title: Next的美化以及遇到的问题date: 2019-07-03 18:10:54categories: - Hexo- 标签,分类tags: - next 这两个的设置几乎一模一样 我们可以打开scaffolds/post.md文件，在tages:上面加入categories:,保存后，之后执行hexo new 文章名命令生成的文件，页面里就有categories:项了。 scaffolds目录下，是新建页面的模板，执行新建命令时，是根据这里的模板页来完成的，所以可以在这里根据你自己的需求添加一些默认值。 关于生成标签页并添加标签属性 命令行blog目录下执行： 1$ hexo new page about 成功后提示： 1INFO Created: ~/Documents/blog/source/about/index.md 根据上面的路径，找到index.md这个文件，打开后修改，自定义页面 给next主题加首歌获取外链 在网页版网易云查找歌曲，点击图标下面 生成外链播放器 点击后进入这个页面 修改 themes/next/layout/_macro/sidebar.swig文件 在114行添加音乐播放器代码： 1234&lt;div&gt; &lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=210 height=110 src=&quot;//music.163.com/outchain/player?type=0&amp;id=2870775476&amp;auto=1&amp;height=66&quot;&gt; &lt;/iframe&gt;&lt;/div&gt; 如何给next博客添加图片正确的图片插入方法 配置_config.yml里面的post_asset_folder:false这个选项设置为true。 执行： npm install https://github.com/7ym0n/hexo-asset-image –save 生成md博文时，/source/_posts文件夹内除了xxxx.md文件还有一个同名的文件夹，把图片放入该文件夹。 使用直接插入图片即可。 添加侧边栏头像添加头像 主题配置文件中找到avatar字段把图片路径写在下面 1234# Sidebar Avatar# in theme directory(source/images): /images/avatar.gif# in site directory(source/uploads): /uploads/avatar.gifavatar: /images/avatar.JPG 我的图片存放路径: blog/themes/next/source/images/avatar.JPG 设置侧边栏头像圆形显示 找到主题配置文件： 打开 /themes/next/source/css/_common/components/sidebar/sidebar-author.styl 1234567891011121314.site-author-image &#123; display: block; margin: 0 auto; padding: $site-author-image-padding; max-width: $site-author-image-width; height: $site-author-image-height; border: $site-author-image-border-width solid $site-author-image-border-color; /*圆形头像*/ border-radius: 80px; -webkit-border-radius: 80px; -moz-border-radius: 80px; box-shadow: inset 0 -1px 0 #333sf;&#125; NexT V7 主题配置文件 1234567891011avatar: # In theme directory (source/images): /images/avatar.gif # In site directory (source/uploads): /uploads/avatar.gif # You can also use other linking images. url: /images/avatar.JPG # If true, the avatar would be dispalyed in circle. rounded: true # The value of opacity should be choose from 0 to 1 to set the opacity of the avatar. opacity: 1 # If true, the avatar would be rotated with the cursor. rotated: true 修改下面用户小图标颜色NexT v7 主题配置文件 12345678icon: # Icon name in fontawesome, see: https://fontawesome.com/v4.7.0/icons/ # `heart` is recommended with animation in red (#ff0000). name: user # If you want to animate the icon, set it to true. animated: true # Change the color of icon, using Hex Code. color: &quot;#ff0000&quot; 实现统计功能实现效果图 具体方法 1. 1$ npm install hexo-wordcount --save 2. 1234post_wordcount: item_text: true wordcount: true min2read: true 给自己的博客添加萌宠或者萌妹子 实现方法 1.获取 1npm install --save hexo-helper-live2d 2.选择模型 123456789101112131415161718192021live2d-widget-model-chitoselive2d-widget-model-epsilon2_1live2d-widget-model-gflive2d-widget-model-haru/01 (use npm install --save live2d-widget-model-haru)live2d-widget-model-haru/02 (use npm install --save live2d-widget-model-haru)live2d-widget-model-harutolive2d-widget-model-hibikilive2d-widget-model-hijikilive2d-widget-model-izumilive2d-widget-model-koharulive2d-widget-model-mikulive2d-widget-model-ni-jlive2d-widget-model-nicolive2d-widget-model-nietzschelive2d-widget-model-nipsilonlive2d-widget-model-nitolive2d-widget-model-shizukulive2d-widget-model-tororolive2d-widget-model-tsumikilive2d-widget-model-unitychanlive2d-widget-model-wanko 模型预览 3.安装（例如选择 live2d-widget-model-haruto） 1npm install live2d-widget-model-haruto 4.在站点的 _config.yml 下添加 1234567891011live2d: enable: true scriptFrom: local model: use: live2d-widget-model-haruto display: position: right width: 150 height: 300 mobile: show: true 点击桃心效果1.在/themes/next/source/js/src下新建文件love.js，接着把该链接下的代码拷贝粘贴到love.js文件中 1!function (e, t, a) &#123; function n() &#123; c(&quot;.heart&#123;width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);&#125;.heart:after,.heart:before&#123;content: &apos;&apos;;width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 50%;-moz-border-radius: 50%;position: fixed;&#125;.heart:after&#123;top: -5px;&#125;.heart:before&#123;left: -5px;&#125;&quot;), o(), r() &#125; function r() &#123; for (var e = 0; e &lt; d.length; e++)d[e].alpha &lt;= 0 ? (t.body.removeChild(d[e].el), d.splice(e, 1)) : (d[e].y-- , d[e].scale += .004, d[e].alpha -= .013, d[e].el.style.cssText = &quot;left:&quot; + d[e].x + &quot;px;top:&quot; + d[e].y + &quot;px;opacity:&quot; + d[e].alpha + &quot;;transform:scale(&quot; + d[e].scale + &quot;,&quot; + d[e].scale + &quot;) rotate(45deg);background:&quot; + d[e].color + &quot;;z-index:99999&quot;); requestAnimationFrame(r) &#125; function o() &#123; var t = &quot;function&quot; == typeof e.onclick &amp;&amp; e.onclick; e.onclick = function (e) &#123; t &amp;&amp; t(), i(e) &#125; &#125; function i(e) &#123; var a = t.createElement(&quot;div&quot;); a.className = &quot;heart&quot;, d.push(&#123; el: a, x: e.clientX - 5, y: e.clientY - 5, scale: 1, alpha: 1, color: s() &#125;), t.body.appendChild(a) &#125; function c(e) &#123; var a = t.createElement(&quot;style&quot;); a.type = &quot;text/css&quot;; try &#123; a.appendChild(t.createTextNode(e)) &#125; catch (t) &#123; a.styleSheet.cssText = e &#125; t.getElementsByTagName(&quot;head&quot;)[0].appendChild(a) &#125; function s() &#123; return &quot;rgb(&quot; + ~~(255 * Math.random()) + &quot;,&quot; + ~~(255 * Math.random()) + &quot;,&quot; + ~~(255 * Math.random()) + &quot;)&quot; &#125; var d = []; e.requestAnimationFrame = function () &#123; return e.requestAnimationFrame || e.webkitRequestAnimationFrame || e.mozRequestAnimationFrame || e.oRequestAnimationFrame || e.msRequestAnimationFrame || function (e) &#123; setTimeout(e, 1e3 / 60) &#125; &#125;(), n() &#125;(window, document); 2.在\themes\next\layout\_layout.swig文件末尾添加： 1&lt;script type=&quot;text/javascript&quot; src=&quot;/js/src/love.js&quot;&gt;&lt;/script&gt; 添加搜索功能安装插件 12npm install hexo-generator-searchnpm install hexo-generator-searchdb 修改站点配置文件_config.yml 添加下面代码 12345search: path: search.xml field: post format: html limit: 10000 配置next主题上的搜索入口 修改Next主题配置文件config.yml，打开local search: 1234567local_search: enable: true # if auto, trigger search by changing input # if manual, trigger search by pressing enter key or search button trigger: auto # show top n results per article, show all results by setting to -1 top_n_per_article: 1 修改nexT Pisces主题内容区宽度在source/css/_schemes/Picses/_layout.styl文件末尾添加如下代码 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647// 以下为新增代码！！// 宽了窄了改下面数值 1200px 1000px$white_max_width = 1100pxheader&#123; width: 90% !important; max-width: $white_max_width;&#125;header.post-header &#123; width: auto !important;&#125;.container .main-inner &#123; width: 90%; max-width: $white_max_width;&#125;.content-wrap &#123; width: calc(100% - 260px); &#125;.header &#123; +tablet() &#123; width: auto !important; &#125; +mobile() &#123; width: auto !important; &#125;&#125;.container .main-inner &#123; +tablet() &#123; width: auto !important; &#125; +mobile() &#123; width: auto !important; &#125;&#125;.content-wrap &#123; +tablet() &#123; width: 100% !important; &#125; +mobile() &#123; // 为了在手机访问时，内边距不至于太大 padding: 0 !important; width: 100% !important; &#125;&#125; 首页文章部分显示首页显示的文章列表，每一遍都是全文，不方便概览。 打开主题配置文件 _config.yml文件，搜索 “auto_excerpt”，enable改为true 12345# Automatically Excerpt. Not recommand.# Please use &lt;!-- more --&gt; in the post to control excerpt accurately.auto_excerpt: enable: true length: 150 顶部加载进度条NexT V7 12# Progress bar in the top during page loading.pace: true 在 themes/next目录下 1git clone https://github.com/theme-next/theme-next-pace source/lib/pace 修改主题配置文件 12pace: truepace_theme: pace-theme-minimal 修改网站背景1.修改网页背景色 打开 themes\next\source\css\_custom\custom.styl文件，添加下列代码 123body &#123; background-color: #EEEEEE; &#125; 2.网页添加背景图片，添加如下代码 1234567body &#123; background-image:url(/images/background.jpg); background-repeat: no-repeat; background-attachment:fixed; background-position:50% 50%; background-size: 100% 100%; &#125; 修改文章间距打开 themes\next\source\css_custom\custom.styl,添加下面代码 12345678910// 主页文章添加阴影效果.posts-expand &#123; .post &#123; margin-top: -30px; margin-bottom: 50px; padding: 25px; -webkit-box-shadow: 0 0 5px rgba(202, 203, 203, .5); -moz-box-shadow: 0 0 5px rgba(202, 203, 204, .5); &#125; &#125; 修改选中字符颜色打开 themes\next\source\css_custom\custom.styl,添加下面代码 1234567891011// 修改选中字符的颜色/* webkit, opera, IE9 */::selection &#123; background: #00c4b6; color: #f7f7f7;&#125;/* firefox */::-moz-selection &#123; background: #00c4b6; color: #f7f7f7;&#125; 侧边栏社交小图标设置打开主题配置文件（_config.yml），搜索social_icons:,在图标库找自己喜欢的小图标，按如下格式 “||” 前面为链接 后面为 图标名称 网站底部加上访问量打开\themes\next\layout\_partials\footer.swig文件,在copyright前加上此代码（第一行）： 1&lt;script async src=&quot;https://busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js&quot;&gt;&lt;/script&gt; 然后再合适的位置添加显示统计的代码（还是这个文件） 12345&lt;div class=&quot;powered-by&quot;&gt;&lt;i class=&quot;fa fa-user-md&quot;&gt;&lt;/i&gt;&lt;span id=&quot;busuanzi_container_site_uv&quot;&gt; 本站访客数:&lt;span id=&quot;busuanzi_value_site_uv&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt; 两中不同计算方式的统计代码 pv的方式，单个用户连续点击n篇文章，记录n次访问量 123&lt;span id=&quot;busuanzi_container_site_pv&quot;&gt; 本站总访问量&lt;span id=&quot;busuanzi_value_site_pv&quot;&gt;&lt;/span&gt;次&lt;/span&gt; ​ 2.uv的方式，单个用户连续点击n篇文章，只记录1次访客数 123&lt;span id=&quot;busuanzi_container_site_uv&quot;&gt; 本站总访问量&lt;span id=&quot;busuanzi_value_site_uv&quot;&gt;&lt;/span&gt;次&lt;/span&gt; 问题汇总图片插入博客无法显示问题踩的坑 在摸索出正确的方法前，踩了不少的坑 1.插件版本安装错误（正确的插入也无法显示） 2.使用markdown插入图片（插件版本正确，插入方式错误） 解决办法 错误原因：由于hexo3版本后对很多插件支持有问题，hexo-asset-image插件在处理data.permalink链接时出现路径错误，把年月去掉了，导致最后生成的路径为%d/xxx/xxx需要对其做兼容处理。 1. 直接安装已经修改过得插件npm install https://github.com/7ym0n/hexo-asset-image --save。 2. 正确的引用图片方式是使用下列的标签插件而不是 markdown ： Deployer not found: git1npm install hexo-deployer-git --save 感谢遇到了很多问题 我们走在前人的道路上 Moorez Xyu_a]]></content>
      <categories>
        <category>NexT</category>
      </categories>
      <tags>
        <tag>next美化</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo小修改]]></title>
    <url>%2F2019%2F07%2F03%2Fhexo%E8%AE%BE%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[说明 hexo 下的_config.yml 称为站点配置文件themes/next 中的_config.yml 称为主题配置文件 .md文件推荐使用 Typora 软件（方便写博文） .yml文件推荐使用 Atom 软件（用记事本可能会页面显示中文乱码） 更换主题下载主题1git clone https://github.com/theme-next/hexo-theme-next themes / next 修改主题打开项目目录下的_config.yml文件 主题更改，注意的是在next前面有个空格 1theme: next 素质三连1.清理一下 hexo clean 2.生成一下 hexo g 3.本地测试 hexo s 最后上传 hexo d 到此为止，主题更新已经完成 语言更换打开项目目录下的_config.yml文件 12# Sitelanguage: zh-Hans 目前可用语言: en English 英语 zh-Hans Chinese (Simplified) 大陆简体 zh-Hant-HK Chinese (Traditional) 港澳繁體 zh-Hant-TW Chinese (Traditional) 台灣正體 主题选择Scheme 是 NexT 提供的一种特性，借助于 Scheme，NexT 为你提供多种不同的外观。同时，几乎所有的配置都可以 在 Scheme 之间共用。目前 NexT 支持三种 Scheme，他们是： Muse - 默认 Scheme，这是 NexT 最初的版本，黑白主调，大量留白Mist - Muse 的紧凑版本，整洁有序的单栏外观Pisces - 双栏 Scheme，小家碧玉似的清新Gemini - 左侧网站信息及目录，块+片段结构布局 cheme 的切换通过更改 主题配置文件，搜索 scheme 关键字。 你会看到有四行 scheme 的配置，将你需用启用的 scheme 前面注释 # 去除即可。]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[我的第一篇博客]]></title>
    <url>%2F2019%2F07%2F02%2F%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2%2F</url>
    <content type="text"><![CDATA[说说自己的感想吧今天开始了java学习。 今天知道了Markdown。 今天搭建了自己的博客。 今天写下了第一篇博客。 今天还偷懒没有去健身(#^.^#)。 今天又是充满希望的一天。 一切都很新奇。 想把这个网站变成自己的喜欢的模样。 Keep Studying~]]></content>
  </entry>
</search>
